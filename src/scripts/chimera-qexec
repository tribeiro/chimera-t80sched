#! /usr/bin/env python
# -*- coding: iso-8859-1 -*-
################################################################################
# chimera - observatory automation system
# Copyright (C) 2006-2009  P. Henrique Silva <henrique@astro.ufsc.br>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
################################################################################

from chimera.core.cli import ChimeraCLI, action
from chimera.core.constants import DEFAULT_PROGRAM_DATABASE
from chimera.core.callback import callback
from chimera.util.position import Position
from chimera.util.output import blue, green, red

from chimera.controllers.scheduler.status import SchedulerStatus
from chimera.controllers.scheduler.states import State
from chimera.controllers.scheduler.model import (Session, Program, Point,
                                                 Expose, PointVerify, AutoFocus)

from t80sched.scheduler import queue

import re
import sys
import os
import shutil
import time

################################################################################

class ChimeraQexec (ChimeraCLI):

    ############################################################################

    def __init__(self):
        ChimeraCLI.__init__(
            self, "chimera-qexec", "Queue executer", 0.0, port=9010)

        self.addHelpGroup("SCHEDULER", "Scheduler")

        self.addController(name="scheduler",
                           cls="Scheduler",
                           required=True,
                           help="Scheduler controller to be used",
                           helpGroup="SCHEDULER")

        self.addHelpGroup("RUN", "Start/Stop/Info")

    ############################################################################

    @action(help="Start the scheduler", helpGroup="RUN", actionGroup="RUN")
    def start(self, options):
        self.out("=" * 40)
        self.out("Starting ...", end="")
        self.scheduler.start()
        self.out("%s" % green("OK"))
        self.out("=" * 40)
        self.monitor(options)

    ############################################################################

    @action(help="Stop the scheduler", helpGroup="RUN", actionGroup="RUN")
    def stop(self, options):
        self.scheduler.stop()
        self.out("OK")

    ############################################################################

    @action(help="Restart the scheduler", helpGroup="RUN", actionGroup="RUN")
    def restart(self, options):
        self.out("=" * 40)
        self.out("Restarting ...", end="")
        self.scheduler.stop()
        self.scheduler.start()
        self.out("%s" % green("OK"))
        self.out("=" * 40)
        self.monitor(options)

    ############################################################################

    @action(help="Print scheduler information", helpGroup="RUN")
    def info(self, options):
        self.out("=" * 40)
        self.out("Scheduler: %s" % self.scheduler.getLocation())
        self.out("State: %s" % self.scheduler.state())
        if self.scheduler.state() == State.BUSY and self.scheduler.currentAction():
            session = Session()
            action = session.merge(self.scheduler.currentAction())
            program = session.query(Program).filter(
                Program.id == action.program_id).one()
            self.out("Working on: %s (%s)" % (program.name, str(action)))

        self.out("=" * 40)
    ############################################################################

    @action(help="Monitor scheduler actions", helpGroup="RUN")
    def monitor(self, options):

        @callback(self.localManager)
        def programBeginClbk(program):
            session = Session()
            program = session.merge(program)
            self.out("=" * 40)
            self.out("%s %s" % (blue("[program]"), program.name))

        @callback(self.localManager)
        def programCompleteClbk(program, status, message=None):
            session = Session()
            program = session.merge(program)
            if status == SchedulerStatus.OK:
                self.out("%s %s %s" %
                         (blue("[program]"), program.name, green(str(status))))
            else:
                self.out("%s %s %s (%s)" % (
                    blue("[program]"), program.name, red(str(status)), red(str(message))))

        @callback(self.localManager)
        def actionBeginClbk(action, message):
            session = Session()
            action = session.merge(action)
            self.out("%s %s ..." % (blue("[action] "), message), end="")

        @callback(self.localManager)
        def actionCompleteClbk(action, status, message=None):
            session = Session()
            action = session.merge(action)

            if status == SchedulerStatus.OK:
                self.out("%s" % green(str(status)))
            else:
                self.out("%s (%s)" % (red(str(status)), red(str(message))))

        @callback(self.localManager)
        def stateChangedClbk(newState, oldState):
            if newState == State.OFF:
                self.out("=" * 40)
                self.out("%s finished all programs" % blue("[scheduler]"))
                self.out("=" * 40)
                self.exit()

        self.scheduler.programBegin += programBeginClbk
        self.scheduler.programComplete += programCompleteClbk
        self.scheduler.actionBegin += actionBeginClbk
        self.scheduler.actionComplete += actionCompleteClbk
        self.scheduler.stateChanged += stateChangedClbk

        if self.scheduler.state() == State.OFF:
            self.out("%s no programs to do" % blue("[scheduler]"))
        else:
            self.wait(abort=False)

    ############################################################################

################################################################################

def main():
    cli = ChimeraQexec()
    cli.run(sys.argv)
    cli.wait()

################################################################################

if __name__ == '__main__':

    main()

################################################################################
