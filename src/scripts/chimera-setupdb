#!/usr/bin/env python

################################################################################

import sys, os
import numpy as np
import time
import shutil
import ConfigParser

from astropy.table import Table

from t80sched.core.constants import DEFAULT_PROGRAM_DATABASE

from chimera.core.cli import ChimeraCLI, action
from chimera.core.callback import callback
from chimera.util.position import Position
from chimera.util.output import blue, green, red

from t80sched.scheduler.model import (Session, Targets, Program, Projects,
                                      Point, BlockPar, BlockConfig, ObsBlock,
                                      Expose, PointVerify, AutoFocus)


################################################################################

class SetupDB(ChimeraCLI):
    ############################################################################

    def __init__(self):
        ChimeraCLI.__init__(self, "chimera-setupdb",
                            "Scheduler controller", 0.0, port=9010)

        # self.addHelpGroup("DB", "Database")

        self.addHelpGroup("PJ", "Projects")
        self.addHelpGroup("TR", "Targets")
        self.addHelpGroup("OB", "Observing Blocks")

        '''
        self.addController(name="scheduler",
                           cls="Scheduler",
                           required=True,
                           help="Scheduler controller to be used",
                           helpGroup="SCHEDULER")
        '''

        self.addParameters(dict(name="filename", long="file", short="f",
                                default="",
                                help="Filename with program or block information.",
                                metavar="FILENAME"))

        self.addParameters(dict(name="pid", long="pid", default=None,
                                help="Project ID to work on.",
                                metavar="pid"))

    ############################################################################

    @action(long="addProject",
            help="Add project (and related information) to the database.",
            helpGroup="PJ", actionGroup="Project")
    def addProject(self, options):

        '''
            Input configuration file for project database. If project exists
            update information, create new project otherwise.
        '''

        config = ConfigParser.RawConfigParser()

        self.out('-Reading project information from %s ...' % options.filename)

        config.read(options.filename)

        session = Session()

        if config.has_section('projects'):
            pid = config.get('projects', 'pid')
            pi = config.get('projects', 'pi')
            abstract = config.get('projects', 'abstract')
            url = config.get('projects', 'url')
            priority = config.get('projects', 'priority')

            project = session.query(Projects).filter(Projects.pid == pid)
            if len(project[:]) > 0:
                self.out('-Project %s already in database. Updating...' % pid)
                project[0].pi = pi
                project[0].abstract = abstract
                project[0].url = url
                project[0].priority = priority
            else:
                self.out('-Adding %s to the database ...' % pid)
                project = Projects(pid=pid,
                                   pi=pi,
                                   abstract=abstract,
                                   url=url,
                                   priority=priority)

                session.add(project)

        self.out('-Reading observing block information...')

        sct = np.array(config.sections())

        bp_sct = sct[np.array([ss.find('blockpar') for ss in sct]) == 0]

        if bp_sct > 0:
            self.out('--Found %i blocks.' % len(bp_sct))

            for ss in bp_sct:

                b_id = config.get(ss, 'id')
                b_pid = config.get(ss, 'pid')
                maxairmass = config.get(ss, 'maxairmass')
                minairmass = config.get(ss, 'minairmass')
                maxmoonBright = config.get(ss, 'maxmoonBright')
                minmoonBright = config.get(ss, 'minmoonBright')
                minmoonDist = config.get(ss, 'minmoonDist')
                maxseeing = config.get(ss, 'maxseeing')
                cloudcover = config.get(ss, 'cloudcover')
                schedalgorith = config.get(ss, 'schedalgorith')
                applyextcorr = config.get(ss, 'applyextcorr')

                block = session.query(BlockPar).filter(BlockPar.bid == b_id).filter(BlockPar.pid == b_pid)
                if len(block[:]) > 0:
                    self.out('---Block %s.%s already in database. Updating...' % (b_pid, b_id))
                    block[0].bid = b_id
                    block[0].pid = b_pid
                    block[0].maxairmass = maxairmass
                    block[0].minairmass = minairmass
                    block[0].maxmoonBright = maxmoonBright
                    block[0].minmoonBright = minmoonBright
                    block[0].minmoonDist = minmoonDist
                    block[0].maxseeing = maxseeing
                    block[0].cloudcover = cloudcover
                    block[0].schedalgorith = schedalgorith
                    block[0].applyextcorr = applyextcorr
                else:
                    self.out('---Adding block %s.%s to the database...' % (b_pid, b_id))
                    block = BlockPar(bid=b_id,
                                     pid=b_pid,
                                     maxairmass=maxairmass,
                                     minairmass=minairmass,
                                     maxmoonBright=maxmoonBright,
                                     minmoonBright=minmoonBright,
                                     minmoonDist=minmoonDist,
                                     maxseeing=maxseeing,
                                     cloudcover=cloudcover,
                                     schedalgorith=schedalgorith,
                                     applyextcorr=applyextcorr)
                    session.add(block)
            session.commit()
        else:
            self.out('--No block definition found.')

        self.out('-Done')

    ############################################################################

    @action(long="deleteProject",
            help="Delete project (and related information) from the database.",
            helpGroup="PJ", actionGroup="Project")
    def deleteProject(self, opt):

        if not opt.pid:
            self.err(red('*') + 'Specify project to delete with \'--pid\' ...')
            return -1

        # save a copy
        if os.path.exists(DEFAULT_PROGRAM_DATABASE):
            shutil.copy(DEFAULT_PROGRAM_DATABASE,
                        "%s.%s.bak" % (DEFAULT_PROGRAM_DATABASE,
                                       time.strftime("%Y%m%d%H%M%S")))

        # delete all projects and related information
        session = Session()

        self.out('-Deleting all references of project %s from database.' % opt.pid)

        obsblock = session.query(ObsBlock).filter(ObsBlock.pid == opt.pid)
        for block in obsblock:
            self.out('--Deleting observing block %s.%s.%s ...' % (block.pid,
                                                                  block.blockid,
                                                                  block.objid))
            session.delete(block)

        blockconfig = session.query(BlockConfig).filter(BlockConfig.pid == opt.pid)
        for block in blockconfig:
            self.out('--Deleting block config %s.%s.%s ...' % (block.pid,
                                                               block.bid,
                                                               block.bparid))
            session.delete(block)

        blocktargets = session.query(BlockPar).filter(BlockPar.pid == opt.pid)
        for block in blocktargets:
            self.out('--Deleting block %s.%s parameters...' % (block.pid,
                                                               block.bid))
            session.delete(block)

        projects = session.query(Projects).filter(Projects.pid == opt.pid)
        for project in projects:
            self.out('--Deleting project %s' % (project.pid))
            session.delete(project)

        session.commit()

        self.out('-Done')

        return 0

    ############################################################################

    @action(long="cleanProject",
            help="Clean project database.",
            helpGroup="PJ", actionGroup="Project")
    def cleanProject(self, options):
        # save a copy
        if os.path.exists(DEFAULT_PROGRAM_DATABASE):
            shutil.copy(DEFAULT_PROGRAM_DATABASE,
                        "%s.%s.bak" % (DEFAULT_PROGRAM_DATABASE,
                                       time.strftime("%Y%m%d%H%M%S")))

        # delete all projects and related information
        session = Session()

        self.out('-Cleaning project table from database.')

        obsblock = session.query(ObsBlock).all()
        for block in obsblock:
            self.out('--Deleting observing block %s.%s.%s ...' % (block.pid,
                                                                  block.blockid,
                                                                  block.objid))
            session.delete(block)

        blockconfig = session.query(BlockConfig).all()
        for block in blockconfig:
            self.out('--Deleting block config %s.%s.%s ...' % (block.pid,
                                                               block.bid,
                                                               block.bparid))
            session.delete(block)

        blocktargets = session.query(BlockPar).all()
        for block in blocktargets:
            self.out('--Deleting block %s.%s parameters...' % (block.pid,
                                                               block.bid))
            session.delete(block)

        projects = session.query(Projects).all()
        for project in projects:
            self.out('--Deleting project %s' % (project.pid))
            session.delete(project)

        session.commit()

        self.out('-Done')

        return 0

    ############################################################################

    @action(long="addTargets",
            help='Add targets to database from a text file. Does not check for duplicated sources.',
            helpGroup="TR", actionGroup="TR")
    def addTargets(self, opt):

        if not opt.filename:
            self.err(red('*') + 'Input not given. Use \'-f\'...')
            return -1

        self.out('-Reading target list from %s ...' % opt.filename)

        targets = Table.read(opt.filename, format='ascii.csv')

        # minimum required entries in input file
        reqpar = ['ra', 'dec']

        coord = True

        givedEntries = {}

        for name in targets.dtype.names:
            givedEntries[name.lower()] = name

        for r in reqpar:
            if not r in givedEntries.keys():
                coord = False
                continue

        if not ('type' in givedEntries.keys() or coord):
                self.err(red('*') + 'Required parameter, %s, missing from input file...' % r)
                return -1

        # additional entries
        addpar = {'name': 'name', 'type': 'type', 'mag': 'targetMag',
                  'epoch': 'targetEpoch',
                  'magfilter': 'magFilter', 'link': 'link'}

        session = Session()

        for i in range(len(targets)):

            p = None
            if coord:
                try:
                    p = Position.fromRaDec(str(targets['RA'][i]),
                                           str(targets['DEC'][i]))
                except ValueError:
                    self.err(red('*') + 'Object in line %i has invalid coordinates (%s,%s). Skipping...' % (
                    i, targets['RA'][i], targets['DEC'][i]))
                    pass
                except:
                    raise

                tpar = {'targetRa': p.ra.H,
                        'targetDec': p.dec.D}
                for pname in addpar.keys():
                    if pname in givedEntries.keys():
                        tpar[addpar[pname]] = targets[givedEntries[pname]][i]

                target = Targets(**tpar)

                self.out('--Adding %s...' % (target.name))

                session.add(target)

                session.commit()
            else:
                tpar = { }
                for pname in addpar.keys():
                    if pname in givedEntries.keys():
                        tpar[addpar[pname]] = targets[givedEntries[pname]][i]

                target = Targets(**tpar)

                self.out('--Adding %s...' % (target.name))

                session.add(target)

                session.commit()


        self.out('-Done')
        return 0

    ############################################################################

    @action(long="cleanTargetsList",
            help='Delete all targets from the database',
            helpGroup="TR", actionGroup="TR")
    def cleanTargetsList(self, opt):

        # save a copy
        if os.path.exists(DEFAULT_PROGRAM_DATABASE):
            shutil.copy(DEFAULT_PROGRAM_DATABASE,
                        "%s.%s.bak" % (DEFAULT_PROGRAM_DATABASE,
                                       time.strftime("%Y%m%d%H%M%S")))

        session = Session()

        ntargets = int(session.query(Targets).count())

        if ntargets == 0:
            self.out('-Target list is alredy empty')
            session.commit()
            self.out('-Done')
            return 0

        targetList = session.query(Targets).all()

        self.out('-Deleting all %i targets from database' % (ntargets))

        for target in targetList:
            session.delete(target)

        session.commit()

        self.out('-Done')

        return 0

    ############################################################################

    @action(long="addObservingBlock",
            help='Add observing block definition to the database.',
            helpGroup="OB", actionGroup="OB")
    def addObservingBlock(self, opt):

        if not opt.filename:
            self.err(red('*') + 'Input not given. Use \'-f\'...')
            return -1

        self.out('-Reading observing blocks from %s' % (opt.filename))

        blockList = Table.read(opt.filename, format='ascii.no_header')

        session = Session()

        for entry in blockList:

            block = entry.data

            config = ConfigParser.RawConfigParser()

            config.read(block[3])

            try:
                filters = config.get('blockconfig', 'filter').split(',')
                exptime = config.get('blockconfig', 'exptime').split(',')
                nexp = config.get('blockconfig', 'nexp').split(',')
                imagetype = config.get('blockconfig', 'imagetype').split(',')
            except:
                self.err('No section blockconfig in file %s' % block[3])
                raise

            addblock = session.query(ObsBlock).filter(ObsBlock.objid == block[2]).filter(
                ObsBlock.blockid == block[1]).filter(ObsBlock.pid == block[0]).filter(ObsBlock.pid == block[0])
            if len(addblock[:]) > 0:
                self.out('--Modifying block: %s' % addblock[0].id)
                blockcnf = session.query(BlockConfig).filter(BlockConfig.bid == block[1])
                addblock[0].objid = block[2],
                addblock[0].blockid = block[1],
                addblock[0].pid = block[0],
                addblock[0].bparid = block[4]

                for bb in blockcnf:
                    session.delete(bb)
                for i in range(len(filters)):
                    blockcnf = BlockConfig(bid=block[1],
                                           filter=filters[i],
                                           exptime=exptime[i],
                                           nexp=nexp[i],
                                           imagetype=imagetype[i],
                                           pid=block[0])
                    session.add(blockcnf)

            else:
                self.out('--Adding block: %s' % block)
                addblock = ObsBlock(objid=block[2],
                                    blockid=block[1],
                                    pid=block[0],
                                    bparid=block[4])
                session.add(addblock)
                for i in range(len(filters)):
                    blockcnf = BlockConfig(bid=block[1],
                                           filter=filters[i],
                                           exptime=exptime[i],
                                           nexp=nexp[i],
                                           imagetype=imagetype[i],
                                           pid=block[0])
                    session.add(blockcnf)

            session.commit()
            # blockcnf = session.query(BlockConfig).filter(BlockConfig.bid == block[1])

        self.out('-Done')

        return 0

    ############################################################################

    @action(long="cleanObservingBlock",
            help='Delete all observing blocks from the database.',
            helpGroup="OB", actionGroup="OB")
    def cleanObservingBlock(self, opt):

        # save a copy
        if os.path.exists(DEFAULT_PROGRAM_DATABASE):
            shutil.copy(DEFAULT_PROGRAM_DATABASE,
                        "%s.%s.bak" % (DEFAULT_PROGRAM_DATABASE,
                                       time.strftime("%Y%m%d%H%M%S")))

        session = Session()

        nblocks = int(session.query(ObsBlock).count())
        nblocksCfg = int(session.query(BlockConfig).count())

        if nblocks == 0 and nblocksCfg == 0:
            self.out('-Observing block list is alredy empty')
            session.commit()
            self.out('-Done')
            return 0

        self.out('-Deleting all %i[%i] observing blocks from database' % (nblocks, nblocksCfg))

        blockList = session.query(ObsBlock).all()

        for block in blockList:
            session.delete(block)

        blockCfgList = session.query(BlockConfig).all()

        for blockCfg in blockCfgList:
            session.delete(blockCfg)

        session.commit()

        self.out('-Done')

        return 0

    ############################################################################

    @action(long="deleteObservingBlock",
            help='Delete observing blocks of a specific project (PID) from the database.',
            helpGroup="OB", actionGroup="OB")
    def deleteObservingBlock(self, opt):

        if not opt.pid:
            self.err(red('*') + 'Specify project to delete with \'--pid\' ...')
            return -1

        # save a copy
        if os.path.exists(DEFAULT_PROGRAM_DATABASE):
            shutil.copy(DEFAULT_PROGRAM_DATABASE,
                        "%s.%s.bak" % (DEFAULT_PROGRAM_DATABASE,
                                       time.strftime("%Y%m%d%H%M%S")))

        session = Session()

        nblocks = int(session.query(ObsBlock).filter(ObsBlock.pid == opt.pid).count())
        nblocksCfg = int(session.query(BlockConfig).filter(BlockConfig.pid == opt.pid).count())

        if nblocks == 0 and nblocksCfg == 0:
            self.out('-No observing block with PID=%s to delete' % opt.pid)
            session.commit()
            self.out('-Done')
            return 0

        self.out('-Deleting all %i[%i] observing blocks with PID=%s from database' % (nblocks, nblocksCfg, opt.pid))

        blockList = session.query(ObsBlock).filter(ObsBlock.pid == opt.pid).all()

        for block in blockList:
            session.delete(block)

        blockCfgList = session.query(BlockConfig).filter(BlockConfig.pid == opt.pid).all()

        for blockCfg in blockCfgList:
            session.delete(blockCfg)

        session.commit()

        self.out('-Done')

        return 0

    ############################################################################


################################################################################

def main():
    cli = SetupDB()
    cli.run(sys.argv)
    cli.wait()

################################################################################

if __name__ == '__main__':
    main()

    ################################################################################